import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { searchPhotosAPI, searchCategoriesAPI } from './searchPhotosAPI';

export interface PhotoObj {
  id: string;
  description: string;
  width: string;
  height: string;
  likes: number;
  urls: {
    full: string;
    small: string;
    thumb: string;
  };
  author: {
    name: string;
    link: string;
  };
}

export interface CategoryObj {
  id: string;
  title: string;
  totalPhotos: number;
  tags: { title: string }[];
  imgUrl: string;
  link: string;
}

interface SarchState {
  photoList: CategoryObj[];
  status: 'idle' | 'loading' | 'failed';
}

const initialState: SarchState = {
  photoList: [
    {
      id: '',
      title: '',
      totalPhotos: 0,
      tags: [{ title: '' }],
      imgUrl: '',
      link: '',
    },
  ],
  status: 'idle',
};

export const fetchRandomPhotos = createAsyncThunk(
  'search/searchPhotos',
  async () => {
    const response = await searchPhotosAPI();
    // The value we return becomes the `fulfilled` action payload
    const photoList: PhotoObj[] = response
      .filter((imgObj) => !imgObj.sponsorship)
      .map((filteredObjs) => ({
        id: filteredObjs.id,
        width: filteredObjs.width,
        height: filteredObjs.height,
        description: filteredObjs.description,
        likes: filteredObjs.likes,
        urls: {
          full: filteredObjs.urls.full,
          small: filteredObjs.urls.small,
          thumb: filteredObjs.urls.thumb,
        },
        author: {
          name: filteredObjs.user.name,
          link: filteredObjs.user.links.html,
        },
      }));
    return photoList;
  }
);

export const fetchPhotosCategories = createAsyncThunk(
  'search/searchPhotos',
  async (): Promise<CategoryObj[]> => {
    const response = await searchCategoriesAPI();
    return response.map((obj) => ({
      id: obj.id,
      title: obj.title,
      totalPhotos: obj['total_photos'],
      tags: obj.tags.map((tag: { title: string }) => tag.title),
      imgUrl: obj['cover_photo'].urls.small,
      link: `${obj.links.photos}/?client_id=npSG8DeRNQsPiJv00JjJfo6d_hN-n47wb4yWQ8sjTcs&per_page=30`,
    }));
  }
);

export const searchSlice = createSlice({
  name: 'search',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // increment: (state) => {
    // Redux Toolkit allows us to write "mutating" logic in reducers. It
    // doesn't actually mutate the state because it uses the Immer library,
    // which detects changes to a "draft state" and produces a brand new
    // immutable state based off those changes
    //   state.value += 1;
    // },
    // decrement: (state) => {
    //   state.value -= 1;
    // },
    // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action: PayloadAction<number>) => {
    //   state.value += action.payload;
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchPhotosCategories.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchPhotosCategories.fulfilled, (state, action) => {
        state.status = 'idle';
        state.photoList = action.payload;
      })
      .addCase(fetchPhotosCategories.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

// export const { increment, decrement, incrementByAmount } = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectCount = (state: RootState) => state.counter.value;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default searchSlice.reducer;
